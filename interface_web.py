#!/usr/bin/env python3
"""
Interface Visual para o Sistema de G√™meo Digital Industrial

Esta interface web permite que clientes finais visualizem e interajam
com as simula√ß√µes do sistema de g√™meo digital de forma simples e intuitiva.
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
import os
from datetime import datetime
import numpy as np

# Importar sistema de g√™meo digital
from main import DigitalTwinSystem
from config import Config

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="G√™meo Digital Industrial",
    page_icon="üè≠",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para melhorar a apar√™ncia
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .success-message {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 1px solid #c3e6cb;
    }
    .warning-message {
        background-color: #fff3cd;
        color: #856404;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 1px solid #ffeaa7;
    }
</style>
""", unsafe_allow_html=True)

def main():
    """Fun√ß√£o principal da interface web."""
    
    # Cabe√ßalho principal
    st.markdown('<h1 class="main-header">üè≠ Sistema de G√™meo Digital Industrial</h1>', unsafe_allow_html=True)
    
    # Barra lateral para configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        # Configura√ß√µes de simula√ß√£o
        st.subheader("üìä Par√¢metros de Simula√ß√£o")
        duration = st.slider("Dura√ß√£o da Simula√ß√£o (horas)", 1, 24, 10)
        num_machines = st.slider("N√∫mero de M√°quinas", 2, 6, 3)
        
        # Configura√ß√µes de m√°quinas
        st.subheader("üîß Configura√ß√£o das M√°quinas")
        machines_config = []
        
        for i in range(num_machines):
            with st.expander(f"M√°quina {chr(65+i)}"):
                min_time = st.number_input(f"Tempo M√≠nimo (h)", 0.1, 5.0, 1.0, key=f"min_{i}")
                max_time = st.number_input(f"Tempo M√°ximo (h)", 0.5, 10.0, 2.0, key=f"max_{i}")
                efficiency = st.slider(f"Efici√™ncia", 0.5, 1.0, 0.9, key=f"eff_{i}")
                failure_rate = st.slider(f"Taxa de Falha", 0.0, 0.1, 0.01, key=f"fail_{i}")
                
                machines_config.append({
                    "name": chr(65+i),
                    "min_time": min_time,
                    "max_time": max_time,
                    "efficiency": efficiency,
                    "failure_rate": failure_rate
                })
        
        # Bot√£o para executar simula√ß√£o
        if st.button("üöÄ Executar Simula√ß√£o", type="primary"):
            run_simulation(duration, machines_config)

def run_simulation(duration, machines_config):
    """Executa a simula√ß√£o e exibe os resultados."""
    
    # Criar configura√ß√£o personalizada
    config = Config()
    config.simulation.duration = duration
    config.machines = []
    
    # Adicionar m√°quinas √† configura√ß√£o
    for machine_config in machines_config:
        from config import MachineConfig
        config.machines.append(MachineConfig(**machine_config))
    
    # Executar simula√ß√£o
    with st.spinner("üîÑ Executando simula√ß√£o..."):
        try:
            system = DigitalTwinSystem()
            system.config = config
            system._initialize_system()
            
            # Executar simula√ß√£o
            system.run_simulation(duration)
            
            # Executar otimiza√ß√£o
            system.run_optimization()
            
            # Treinar modelos preditivos
            system.train_predictive_models()
            
            st.success("‚úÖ Simula√ß√£o conclu√≠da com sucesso!")
            
            # Exibir resultados
            display_results(system)
            
        except Exception as e:
            st.error(f"‚ùå Erro na simula√ß√£o: {str(e)}")

def display_results(system):
    """Exibe os resultados da simula√ß√£o."""
    
    # M√©tricas principais
    st.header("üìà Resultados da Simula√ß√£o")
    
    # Criar colunas para m√©tricas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="Total de Ciclos",
            value=system.production_line.total_cycles if system.production_line else 0
        )
    
    with col2:
        efficiency = system.production_line.line_efficiency if system.production_line else 0
        st.metric(
            label="Efici√™ncia da Linha",
            value=f"{efficiency:.1%}"
        )
    
    with col3:
        bottleneck = system.production_line.bottleneck_machine.name if system.production_line and system.production_line.bottleneck_machine else "N/A"
        st.metric(
            label="Gargalo",
            value=bottleneck
        )
    
    with col4:
        improvement = getattr(system, 'optimization_results', {}).get('improvement_percentage', 0)
        st.metric(
            label="Melhoria da Otimiza√ß√£o",
            value=f"{improvement:.1f}%"
        )
    
    # Gr√°ficos de performance
    st.header("üìä An√°lise de Performance")
    
    # Gr√°fico de tempos de opera√ß√£o
    if system.machines:
        fig_operations = create_operations_chart(system.machines)
        st.plotly_chart(fig_operations, use_container_width=True)
    
    # Gr√°fico de efici√™ncia das m√°quinas
    if system.machines:
        fig_efficiency = create_efficiency_chart(system.machines)
        st.plotly_chart(fig_efficiency, use_container_width=True)
    
    # An√°lise de gargalos
    if system.production_line:
        st.header("üîç An√°lise de Gargalos")
        
        bottleneck_freq = system.production_line.get_production_metrics().get('bottleneck_frequency', {})
        if bottleneck_freq:
            fig_bottleneck = create_bottleneck_chart(bottleneck_freq)
            st.plotly_chart(fig_bottleneck, use_container_width=True)
    
    # Previs√µes dos modelos
    if system.predictive_models:
        st.header("üîÆ Previs√µes dos Modelos")
        
        predictions_data = []
        for name, model in system.predictive_models.items():
            prediction = model.predict_next()
            predictions_data.append({
                'M√°quina': name,
                'Previs√£o (h)': f"{prediction:.2f}",
                'Pr√≥ximo Ciclo': prediction
            })
        
        df_predictions = pd.DataFrame(predictions_data)
        st.dataframe(df_predictions, use_container_width=True)
        
        # Gr√°fico de previs√µes
        fig_predictions = create_predictions_chart(predictions_data)
        st.plotly_chart(fig_predictions, use_container_width=True)
    
    # Relat√≥rio detalhado
    st.header("üìã Relat√≥rio Detalhado")
    
    # Estat√≠sticas das m√°quinas
    machines_stats = []
    for machine in system.machines:
        stats = machine.get_statistics()
        machines_stats.append({
            'M√°quina': machine.name,
            'Opera√ß√µes': stats['total_operations'],
            'Tempo M√©dio (h)': f"{stats['average_time']:.2f}",
            'Efici√™ncia': f"{stats['efficiency']:.1%}",
            'Disponibilidade': f"{stats['availability']:.1%}",
            'Tempo de Inatividade (h)': f"{stats['total_downtime']:.2f}"
        })
    
    df_machines = pd.DataFrame(machines_stats)
    st.dataframe(df_machines, use_container_width=True)
    
    # Bot√£o para download do relat√≥rio
    if st.button("üì• Baixar Relat√≥rio Completo"):
        download_report(system)

def create_operations_chart(machines):
    """Cria gr√°fico de tempos de opera√ß√£o."""
    fig = go.Figure()
    
    for machine in machines:
        if machine.operation_times:
            fig.add_trace(go.Scatter(
                x=list(range(len(machine.operation_times))),
                y=machine.operation_times,
                mode='lines+markers',
                name=f'M√°quina {machine.name}',
                line=dict(width=2)
            ))
    
    fig.update_layout(
        title="Tempos de Opera√ß√£o das M√°quinas",
        xaxis_title="Ciclo",
        yaxis_title="Tempo (horas)",
        hovermode='x unified'
    )
    
    return fig

def create_efficiency_chart(machines):
    """Cria gr√°fico de efici√™ncia das m√°quinas."""
    machine_names = [f"M√°quina {m.name}" for m in machines]
    efficiencies = [m.efficiency for m in machines]
    
    fig = px.bar(
        x=machine_names,
        y=efficiencies,
        title="Efici√™ncia das M√°quinas",
        labels={'x': 'M√°quinas', 'y': 'Efici√™ncia'},
        color=efficiencies,
        color_continuous_scale='RdYlGn'
    )
    
    fig.update_layout(
        yaxis=dict(range=[0, 1]),
        showlegend=False
    )
    
    return fig

def create_bottleneck_chart(bottleneck_freq):
    """Cria gr√°fico de an√°lise de gargalos."""
    machines = list(bottleneck_freq.keys())
    frequencies = list(bottleneck_freq.values())
    
    fig = px.pie(
        values=frequencies,
        names=machines,
        title="Frequ√™ncia de Gargalos por M√°quina"
    )
    
    return fig

def create_predictions_chart(predictions_data):
    """Cria gr√°fico de previs√µes."""
    machines = [item['M√°quina'] for item in predictions_data]
    predictions = [item['Pr√≥ximo Ciclo'] for item in predictions_data]
    
    fig = px.bar(
        x=machines,
        y=predictions,
        title="Previs√µes para Pr√≥ximo Ciclo",
        labels={'x': 'M√°quinas', 'y': 'Tempo Previsto (horas)'},
        color=predictions,
        color_continuous_scale='Blues'
    )
    
    return fig

def download_report(system):
    """Gera e disponibiliza relat√≥rio para download."""
    # Criar relat√≥rio em formato JSON
    report = {
        'timestamp': datetime.now().isoformat(),
        'simulation_duration': system.config.simulation.duration,
        'machines': [],
        'production_metrics': {},
        'optimization_results': getattr(system, 'optimization_results', None)
    }
    
    # Adicionar dados das m√°quinas
    for machine in system.machines:
        stats = machine.get_statistics()
        report['machines'].append({
            'name': machine.name,
            'statistics': stats
        })
    
    # Adicionar m√©tricas de produ√ß√£o
    if system.production_line:
        report['production_metrics'] = system.production_line.get_production_metrics()
    
    # Converter para JSON
    json_report = json.dumps(report, indent=2, ensure_ascii=False)
    
    # Disponibilizar para download
    st.download_button(
        label="üì• Baixar Relat√≥rio JSON",
        data=json_report,
        file_name=f"relatorio_gemeo_digital_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        mime="application/json"
    )

if __name__ == "__main__":
    main()
