#!/usr/bin/env python3
"""
Exemplo de uso da interface web do Sistema de G√™meo Digital.

Este script demonstra como usar a interface programaticamente
e como integrar com o sistema principal.
"""
import json
import os
from main import DigitalTwinSystem
from config import Config, MachineConfig

def criar_configuracao_exemplo():
    """Cria uma configura√ß√£o de exemplo para demonstra√ß√£o."""
    print("üîß Criando configura√ß√£o de exemplo...")
    
    # Criar configura√ß√£o personalizada
    config = Config()
    
    # Configurar simula√ß√£o
    config.simulation.duration = 8.0
    config.simulation.random_seed = 42
    config.simulation.log_level = "INFO"
    
    # Configurar m√°quinas
    config.machines = [
        MachineConfig("A", 1.0, 2.0, 0.95, 100.0, 0.01),
        MachineConfig("B", 0.8, 1.8, 0.90, 80.0, 0.015),
        MachineConfig("C", 1.2, 2.5, 0.88, 120.0, 0.012)
    ]
    
    # Configurar otimiza√ß√£o
    config.optimization.algorithm = "L-BFGS-B"
    config.optimization.max_iterations = 1000
    config.optimization.tolerance = 1e-6
    
    # Configurar visualiza√ß√£o
    config.visualization.figure_size = (12, 8)
    config.visualization.save_plots = True
    config.visualization.output_dir = "output"
    
    return config

def executar_simulacao_exemplo():
    """Executa uma simula√ß√£o de exemplo."""
    print("üöÄ Executando simula√ß√£o de exemplo...")
    
    try:
        # Criar configura√ß√£o
        config = criar_configuracao_exemplo()
        
        # Inicializar sistema
        system = DigitalTwinSystem()
        system.config = config
        system._initialize_system()
        
        # Executar simula√ß√£o
        print("üìä Executando simula√ß√£o...")
        system.run_simulation()
        
        # Executar otimiza√ß√£o
        print("‚ö° Executando otimiza√ß√£o...")
        system.run_optimization()
        
        # Treinar modelos preditivos
        print("ü§ñ Treinando modelos preditivos...")
        system.train_predictive_models()
        
        # Gerar visualiza√ß√µes
        print("üìà Gerando visualiza√ß√µes...")
        system.generate_visualizations()
        
        # Gerar relat√≥rio
        print("üìã Gerando relat√≥rio...")
        report = system.generate_report()
        
        return system, report
        
    except Exception as e:
        print(f"‚ùå Erro na simula√ß√£o: {e}")
        return None, None

def mostrar_resultados(system, report):
    """Mostra os resultados da simula√ß√£o."""
    print("\n" + "=" * 60)
    print("üìä RESULTADOS DA SIMULA√á√ÉO")
    print("=" * 60)
    
    # M√©tricas principais
    if system.production_line:
        metrics = system.production_line.get_production_metrics()
        print(f"Total de Ciclos: {metrics['total_cycles']}")
        print(f"Efici√™ncia da Linha: {metrics['line_efficiency']:.2%}")
        print(f"Gargalo: {metrics['bottleneck_machine']}")
    
    # Resultados de otimiza√ß√£o
    if hasattr(system, 'optimization_results'):
        opt = system.optimization_results
        print(f"Melhoria da Otimiza√ß√£o: {opt['improvement_percentage']:.2f}%")
    
    # Modelos preditivos
    print(f"Modelos Preditivos Treinados: {len(system.predictive_models)}")
    
    # Estat√≠sticas das m√°quinas
    print("\nüìà Estat√≠sticas das M√°quinas:")
    for machine in system.machines:
        stats = machine.get_statistics()
        print(f"  {machine.name}: {stats['total_operations']} opera√ß√µes, "
              f"tempo m√©dio: {stats['average_time']:.2f}h, "
              f"efici√™ncia: {stats['efficiency']:.2%}")

def salvar_configuracao_exemplo():
    """Salva a configura√ß√£o de exemplo em arquivo."""
    print("üíæ Salvando configura√ß√£o de exemplo...")
    
    config = criar_configuracao_exemplo()
    config.save_to_file("config_exemplo.json")
    print("‚úÖ Configura√ß√£o salva em config_exemplo.json")

def criar_script_interface():
    """Cria um script personalizado para a interface."""
    print("üìù Criando script personalizado para interface...")
    
    script_content = '''
#!/usr/bin/env python3
"""
Script personalizado para interface web.
"""
import streamlit as st
from main import DigitalTwinSystem
from config import Config

def main():
    st.title("üè≠ G√™meo Digital - Configura√ß√£o Personalizada")
    
    # Configura√ß√µes personalizadas
    duration = st.slider("Dura√ß√£o (horas)", 1, 24, 8)
    num_machines = st.slider("N√∫mero de M√°quinas", 2, 6, 3)
    
    if st.button("Executar Simula√ß√£o"):
        # Sua l√≥gica personalizada aqui
        st.success("Simula√ß√£o executada com sucesso!")

if __name__ == "__main__":
    main()
'''
    
    with open("interface_personalizada.py", "w", encoding="utf-8") as f:
        f.write(script_content)
    
    print("‚úÖ Script personalizado criado: interface_personalizada.py")

def main():
    """Fun√ß√£o principal do exemplo."""
    print("üè≠ Exemplo de Uso da Interface Web - G√™meo Digital")
    print("=" * 70)
    
    # Criar configura√ß√£o de exemplo
    salvar_configuracao_exemplo()
    
    # Executar simula√ß√£o
    system, report = executar_simulacao_exemplo()
    
    if system and report:
        # Mostrar resultados
        mostrar_resultados(system, report)
        
        # Criar script personalizado
        criar_script_interface()
        
        print("\n‚úÖ Exemplo executado com sucesso!")
        print("üìÅ Verifique os arquivos gerados:")
        print("  - config_exemplo.json")
        print("  - interface_personalizada.py")
        print("  - output/ (visualiza√ß√µes)")
        print("  - logs/ (logs do sistema)")
    else:
        print("‚ùå Falha na execu√ß√£o do exemplo")

if __name__ == "__main__":
    main()
