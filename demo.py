#!/usr/bin/env python3
"""
Script de demonstra√ß√£o para o sistema de G√™meo Digital.

Este script executa uma demonstra√ß√£o completa do sistema,
mostrando todas as funcionalidades principais.
"""
import os
import sys
from main import DigitalTwinSystem

def run_demo():
    """Executa uma demonstra√ß√£o do sistema de G√™meo Digital."""
    print("üè≠ Sistema de G√™meo Digital Industrial - Demonstra√ß√£o")
    print("=" * 50)
    
    try:
        # Inicializar sistema com configura√ß√£o padr√£o
        print("Inicializando Sistema de G√™meo Digital...")
        system = DigitalTwinSystem()
        
        # Executar simula√ß√£o curta
        print("Executando simula√ß√£o...")
        system.run_simulation(duration=5.0)
        
        # Executar otimiza√ß√£o
        print("Executando otimiza√ß√£o...")
        system.run_optimization()
        
        # Treinar modelos preditivos
        print("Treinando modelos preditivos...")
        system.train_predictive_models()
        
        # Gerar visualiza√ß√µes
        print("Gerando visualiza√ß√µes...")
        system.generate_visualizations()
        
        # Gerar relat√≥rio
        print("Gerando relat√≥rio do sistema...")
        report = system.generate_report()
        
        # Imprimir resumo
        print("\n" + "=" * 50)
        print("RESUMO DA DEMONSTRA√á√ÉO")
        print("=" * 50)
        
        print(f"N√∫mero de m√°quinas: {len(system.machines)}")
        
        if system.production_line:
            metrics = system.production_line.get_production_metrics()
            print(f"Total de ciclos completados: {metrics['total_cycles']}")
            print(f"Efici√™ncia da linha: {metrics['line_efficiency']:.2%}")
            print(f"M√°quina gargalo: {metrics['bottleneck_machine']}")
        
        if hasattr(system, 'optimization_results'):
            opt = system.optimization_results
            print(f"Melhoria da otimiza√ß√£o: {opt['improvement_percentage']:.2f}%")
        
        print(f"Modelos preditivos treinados: {len(system.predictive_models)}")
        
        # Imprimir estat√≠sticas das m√°quinas
        print("\nEstat√≠sticas das M√°quinas:")
        for machine in system.machines:
            stats = machine.get_statistics()
            print(f"  {machine.name}: {stats['total_operations']} opera√ß√µes, "
                  f"tempo m√©dio: {stats['average_time']:.2f}h, "
                  f"efici√™ncia: {stats['efficiency']:.2%}")
        
        print("\n‚úÖ Demonstra√ß√£o conclu√≠da com sucesso!")
        print("Verifique o diret√≥rio 'output' para visualiza√ß√µes e relat√≥rios gerados.")
        
    except Exception as e:
        print(f"‚ùå Demonstra√ß√£o falhou: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = run_demo()
    sys.exit(exit_code)
